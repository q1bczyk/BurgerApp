// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Admin", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Contact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DayOff", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DayOffs");
                });

            modelBuilder.Entity("DayOffLocal", b =>
                {
                    b.Property<string>("DayOffId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("LocalId")
                        .HasColumnType("character varying(36)");

                    b.HasKey("DayOffId", "LocalId");

                    b.HasIndex("LocalId");

                    b.ToTable("DayOffLocals");
                });

            modelBuilder.Entity("Local", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locals");
                });

            modelBuilder.Entity("OpeningHour", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Closed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Opened")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("OpeningHourLocal", b =>
                {
                    b.Property<string>("LocalId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("OpeningHourId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("DayOffsId")
                        .IsRequired()
                        .HasColumnType("character varying(36)");

                    b.HasKey("LocalId", "OpeningHourId");

                    b.HasIndex("DayOffsId");

                    b.HasIndex("OpeningHourId");

                    b.ToTable("OpeningHourLocals");
                });

            modelBuilder.Entity("DayOffLocal", b =>
                {
                    b.HasOne("DayOff", "DayOff")
                        .WithMany("DayOffLocals")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local", "Local")
                        .WithMany("DayOffLocals")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayOff");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("Local", b =>
                {
                    b.HasOne("Admin", "Admin")
                        .WithOne("Local")
                        .HasForeignKey("Local", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contact", "Contact")
                        .WithOne("Local")
                        .HasForeignKey("Local", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OpeningHourLocal", b =>
                {
                    b.HasOne("DayOff", null)
                        .WithMany()
                        .HasForeignKey("DayOffsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local", "Local")
                        .WithMany("OpeningHourLocals")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpeningHour", "OpeningHour")
                        .WithMany("OpeningHourLocals")
                        .HasForeignKey("OpeningHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Local");

                    b.Navigation("OpeningHour");
                });

            modelBuilder.Entity("Admin", b =>
                {
                    b.Navigation("Local")
                        .IsRequired();
                });

            modelBuilder.Entity("Contact", b =>
                {
                    b.Navigation("Local")
                        .IsRequired();
                });

            modelBuilder.Entity("DayOff", b =>
                {
                    b.Navigation("DayOffLocals");
                });

            modelBuilder.Entity("Local", b =>
                {
                    b.Navigation("DayOffLocals");

                    b.Navigation("OpeningHourLocals");
                });

            modelBuilder.Entity("OpeningHour", b =>
                {
                    b.Navigation("OpeningHourLocals");
                });
#pragma warning restore 612, 618
        }
    }
}
